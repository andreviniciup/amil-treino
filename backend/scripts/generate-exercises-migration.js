/**
 * Script para gerar migration SQL com todos os exerc√≠cios
 * L√™ o JSON de exerc√≠cios e cria um arquivo SQL para popular a tabela Exercise
 */

const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

// Fun√ß√£o para gerar UUID
function generateUUID() {
  return crypto.randomUUID();
}

// Caminho do JSON com exerc√≠cios
const jsonPath = path.join(__dirname, '../temp-exercicios/exercises/exercises-ptbr-full-translation.json');
const outputPath = path.join(__dirname, '../prisma/migrations/seed-exercises.sql');

// CDN base URL para imagens
const CDN_BASE = 'https://cdn.jsdelivr.net/gh/andreviniciup/amil-treino-images@main/exercises';

console.log('üîç Lendo arquivo de exerc√≠cios...');
const exercises = JSON.parse(fs.readFileSync(jsonPath, 'utf-8'));
console.log(`üìä Total de exerc√≠cios encontrados: ${exercises.length}`);

// Mapeamento de m√∫sculos para partes do corpo
const bodyPartMap = {
  'abdominais': 'abd√¥men',
  'abdominals': 'abd√¥men',
  'obl√≠quos': 'abd√¥men',
  'core': 'abd√¥men',
  
  'peito': 'peito',
  'peitoral': 'peito',
  'chest': 'peito',
  
  'costas': 'costas',
  'dorsal': 'costas',
  'lat√≠ssimo': 'costas',
  'trap√©zio': 'costas',
  'back': 'costas',
  
  'ombros': 'ombros',
  'deltoide': 'ombros',
  'deltoides': 'ombros',
  'shoulders': 'ombros',
  
  'b√≠ceps': 'bra√ßos',
  'biceps': 'bra√ßos',
  'tr√≠ceps': 'bra√ßos',
  'triceps': 'bra√ßos',
  'antebra√ßos': 'bra√ßos',
  'antebracos': 'bra√ßos',
  'forearms': 'bra√ßos',
  'arms': 'bra√ßos',
  
  'quadr√≠ceps': 'pernas',
  'quadriceps': 'pernas',
  'isquiotibiais': 'pernas',
  'hamstrings': 'pernas',
  'panturrilhas': 'pernas',
  'calves': 'pernas',
  'gl√∫teos': 'pernas',
  'gluteos': 'pernas',
  'glutes': 'pernas',
  'coxas': 'pernas',
  'thighs': 'pernas',
  'legs': 'pernas',
  
  'lombar': 'lombar',
  'lower-back': 'lombar',
  
  'pesco√ßo': 'pesco√ßo',
  'neck': 'pesco√ßo',
};

function getBodyPart(muscles) {
  if (!muscles || muscles.length === 0) return 'geral';
  
  const primary = muscles[0].toLowerCase();
  
  for (const [key, value] of Object.entries(bodyPartMap)) {
    if (primary.includes(key)) {
      return value;
    }
  }
  
  return 'geral';
}

function escapeSQL(str) {
  if (!str) return '';
  return str.replace(/'/g, "''");
}

function formatGifUrl(imagePath) {
  if (!imagePath) return '';
  
  // Extrai o nome da pasta (ID do exerc√≠cio)
  const folder = imagePath.split('/')[0];
  return `${CDN_BASE}/${folder}/0.jpg`;
}

console.log('üîÑ Gerando SQL...');

// Cabe√ßalho do SQL
let sql = `-- Migration: Seed de Exerc√≠cios
-- Gerado automaticamente em: ${new Date().toISOString()}
-- Total de exerc√≠cios: ${exercises.length}

-- Deletar exerc√≠cios existentes (caso haja)
DELETE FROM "WorkoutExercise";
DELETE FROM "PerformanceHistory";
DELETE FROM "Exercise";

-- Inserir exerc√≠cios
`;

let insertedCount = 0;
let skippedCount = 0;

for (const ex of exercises) {
  try {
    const id = generateUUID();
    const name = escapeSQL(ex.name);
    const bodyPart = getBodyPart(ex.primaryMuscles);
    const equipment = escapeSQL(ex.equipment || 'peso-do-corpo');
    const gifUrl = formatGifUrl(ex.images ? ex.images[0] : null);
    const target = escapeSQL(ex.primaryMuscles && ex.primaryMuscles[0] ? ex.primaryMuscles[0] : '');
    const secondaryMuscles = escapeSQL(JSON.stringify(ex.secondaryMuscles || []));
    const instructions = escapeSQL(JSON.stringify(ex.instructions || []));
    const externalId = escapeSQL(ex.id);
    
    if (!name) {
      skippedCount++;
      continue;
    }
    
    sql += `INSERT INTO "Exercise" ("id", "externalId", "name", "bodyPart", "equipment", "gifUrl", "target", "secondaryMuscles", "instructions", "source", "createdAt", "updatedAt")
VALUES ('${id}', '${externalId}', '${name}', '${bodyPart}', '${equipment}', '${gifUrl}', '${target}', '${secondaryMuscles}', '${instructions}', 'internal', NOW(), NOW());

`;
    
    insertedCount++;
    
    // Log de progresso a cada 100 exerc√≠cios
    if (insertedCount % 100 === 0) {
      console.log(`   ‚úì ${insertedCount} exerc√≠cios processados...`);
    }
    
  } catch (error) {
    console.error(`   ‚ö†Ô∏è  Erro ao processar exerc√≠cio ${ex.name}:`, error.message);
    skippedCount++;
  }
}

console.log(`\n‚úÖ SQL gerado com sucesso!`);
console.log(`   üìù Exerc√≠cios inseridos: ${insertedCount}`);
console.log(`   ‚ö†Ô∏è  Exerc√≠cios pulados: ${skippedCount}`);
console.log(`   üìÑ Arquivo: ${outputPath}\n`);

// Salvar arquivo SQL
fs.writeFileSync(outputPath, sql, 'utf-8');

console.log('üéâ Migration SQL criada com sucesso!');
console.log('üìã Pr√≥ximos passos:');
console.log('   1. Revisar o arquivo: prisma/migrations/seed-exercises.sql');
console.log('   2. Aplicar localmente: psql $DATABASE_URL < prisma/migrations/seed-exercises.sql');
console.log('   3. Ou usar o script: npm run seed:sql');
