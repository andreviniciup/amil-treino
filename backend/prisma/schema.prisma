// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  name         String
  passwordHash String
  age          Int?
  gender       String?
  weight       Float?
  height       Float?
  fitnessGoal  String?
  trainingDays String?       // JSON array dos dias
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  workoutPlans           WorkoutPlan[]
  workoutLogs            WorkoutLog[]
  profile                UserProfile?
  performanceHistory     PerformanceHistory[]
  trainingRecommendations TrainingRecommendation[]
  feedback               UserFeedback[]
  badges                 UserBadge[]
  scores                 UserScore[]
}

model WorkoutPlan {
  id            String    @id @default(uuid())
  userId        String
  name          String
  description   String?
  frequency     Int
  trainingTypes String    // JSON string array
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workouts Workout[]
}

model Workout {
  id           String   @id @default(uuid())
  planId       String
  dayOfWeek    String
  trainingType String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  plan      WorkoutPlan       @relation(fields: [planId], references: [id], onDelete: Cascade)
  exercises WorkoutExercise[]
}

model WorkoutExercise {
  id           String  @id @default(uuid())
  workoutId    String
  exerciseId   String  // ID interno da tabela Exercise
  exerciseName String
  sets         Int
  reps         String
  weight       Float?
  duration     Int?
  restTime     Int
  order        Int
  notes        String?
  gifUrl       String?
  bodyPart     String?
  equipment    String?
  target       String?
  
  workout  Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
}

model WorkoutLog {
  id          String   @id @default(uuid())
  userId      String
  workoutId   String
  completedAt DateTime @default(now())
  duration    Int?
  notes       String?
  
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercises ExerciseLog[]
}

model ExerciseLog {
  id           String  @id @default(uuid())
  workoutLogId String
  exerciseId   String  // Referência ao exercício do WorkoutExercise
  sets         Int
  reps         String  // JSON array
  weights      String  // JSON array
  completed    Boolean
  
  workoutLog WorkoutLog @relation(fields: [workoutLogId], references: [id], onDelete: Cascade)
}

model Exercise {
  id               String   @id @default(uuid())
  externalId       String?  // ID da API externa (ExerciseDB/Wger)
  name             String
  bodyPart         String
  equipment        String
  gifUrl           String?
  target           String?
  secondaryMuscles String?  // JSON array
  instructions     String?  // JSON array
  source           String   // 'internal', 'exercisedb', 'wger'
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relacionamentos
  workoutExercises   WorkoutExercise[]
  performanceHistory PerformanceHistory[]
  
  @@unique([externalId, source], name: "externalId_source")
  @@index([bodyPart])
  @@index([source])
}

// ============================================================================
// SISTEMA DE PERFIL E RECOMENDAÇÃO
// ============================================================================

model UserProfile {
  id                  String   @id @default(uuid())
  userId              String   @unique
  fitnessLevel        String   // Iniciante, Intermediário, Avançado
  primaryGoals        String   // JSON array
  secondaryGoals      String   // JSON array
  trainingExperience  Int      // Anos
  preferredIntensity  String?  // Baixa, Média, Alta
  availableTime       Int?     // Minutos por sessão
  equipmentAccess     String?  // JSON array
  injuryHistory       String?  // JSON array
  preferences         String?  // JSON object
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TrainingMethod {
  id              String   @id @default(uuid())
  name            String   @unique
  description     String
  minDays         Int
  maxDays         Int
  difficulty      String
  goals           String   // JSON array
  equipment       String   // JSON array
  timeRequired    Int      // Minutos
  split           String   // JSON array
  benefits        String   // JSON array
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  
  recommendations TrainingRecommendation[]
}

model TrainingRecommendation {
  id           String   @id @default(uuid())
  userId       String
  methodId     String
  confidence   Float    // 0.0 a 1.0
  reasoning    String
  alternatives String?  // JSON array
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  
  user   User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  method TrainingMethod @relation(fields: [methodId], references: [id])
  
  @@index([userId])
  @@index([methodId])
  @@index([expiresAt])
}

model PerformanceHistory {
  id         String   @id @default(uuid())
  userId     String
  exerciseId String
  date       DateTime
  weight     Float?
  reps       Int?
  sets       Int?
  duration   Int?     // segundos
  rpe        Int?     // 1-10
  notes      String?
  createdAt  DateTime @default(now())
  
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercise Exercise @relation(fields: [exerciseId], references: [id])
  
  @@index([userId])
  @@index([exerciseId])
  @@index([date])
}

model UserFeedback {
  id               String   @id @default(uuid())
  userId           String
  recommendationId String
  rating           Int      // 1-5
  feedback         String?
  isHelpful        Boolean?
  action           String?  // accepted, rejected, modified
  createdAt        DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([recommendationId])
}

// ============================================================================
// SISTEMA DE GAMIFICAÇÃO
// ============================================================================

model Badge {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  category    String   // consistency, progression, goals
  iconUrl     String?
  requirement String   // JSON object
  points      Int      @default(0)
  createdAt   DateTime @default(now())
  
  userBadges UserBadge[]
}

model UserBadge {
  id        String   @id @default(uuid())
  userId    String
  badgeId   String
  earnedAt  DateTime @default(now())
  
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge Badge @relation(fields: [badgeId], references: [id])
  
  @@unique([userId, badgeId])
  @@index([userId])
  @@index([badgeId])
}

model UserScore {
  id                 String   @id @default(uuid())
  userId             String
  totalPoints        Int      @default(0)
  consistencyPoints  Int      @default(0)
  progressionPoints  Int      @default(0)
  goalPoints         Int      @default(0)
  level              Int      @default(1)
  currentStreak      Int      @default(0)
  longestStreak      Int      @default(0)
  updatedAt          DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId])
  @@index([totalPoints])
  @@index([level])
}

