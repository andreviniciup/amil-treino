# Script PowerShell para migrar sistema ML para Deep Learning
# Execute: .\MIGRAR-PARA-DL.ps1

Write-Host "üß† MIGRANDO SISTEMA ML PARA DEEP LEARNING" -ForegroundColor Cyan
Write-Host "=" * 70 -ForegroundColor Gray
Write-Host ""

# Cores
$successColor = "Green"
$errorColor = "Red"
$infoColor = "Yellow"
$warningColor = "Magenta"

# ============================================================================
# VERIFICA√á√ÉO INICIAL
# ============================================================================
Write-Host "üîç 1. VERIFICANDO PR√â-REQUISITOS" -ForegroundColor $infoColor
Write-Host ""

# Verificar Python
try {
    $pythonVersion = python --version 2>&1
    Write-Host "‚úÖ Python encontrado: $pythonVersion" -ForegroundColor $successColor
} catch {
    Write-Host "‚ùå Python n√£o encontrado. Instale Python 3.10+" -ForegroundColor $errorColor
    exit 1
}

# Verificar pip
try {
    $pipVersion = pip --version 2>&1
    Write-Host "‚úÖ pip encontrado: $pipVersion" -ForegroundColor $successColor
} catch {
    Write-Host "‚ùå pip n√£o encontrado" -ForegroundColor $errorColor
    exit 1
}

Write-Host ""

# ============================================================================
# BACKUP DO SISTEMA ATUAL
# ============================================================================
Write-Host "üíæ 2. CRIANDO BACKUP DO SISTEMA ATUAL" -ForegroundColor $infoColor
Write-Host ""

$backupDir = "backup-ml-$(Get-Date -Format 'yyyy-MM-dd-HH-mm')"
try {
    New-Item -ItemType Directory -Path $backupDir -Force | Out-Null
    Copy-Item -Path "ml-service" -Destination "$backupDir/ml-service-backup" -Recurse -Force
    Write-Host "‚úÖ Backup criado em: $backupDir" -ForegroundColor $successColor
} catch {
    Write-Host "‚ö†Ô∏è Falha ao criar backup, continuando..." -ForegroundColor $warningColor
}

Write-Host ""

# ============================================================================
# INSTALA√á√ÉO DE DEPEND√äNCIAS DL
# ============================================================================
Write-Host "üì¶ 3. INSTALANDO DEPEND√äNCIAS DEEP LEARNING" -ForegroundColor $infoColor
Write-Host ""

# Navegar para ml-service
Set-Location ml-service

# Ativar ambiente virtual
try {
    .\venv\Scripts\Activate.ps1
    Write-Host "‚úÖ Ambiente virtual ativado" -ForegroundColor $successColor
} catch {
    Write-Host "‚ùå Falha ao ativar ambiente virtual" -ForegroundColor $errorColor
    Write-Host "   Execute: python -m venv venv" -ForegroundColor Gray
    exit 1
}

# Instalar depend√™ncias DL
Write-Host "üì• Instalando TensorFlow..." -ForegroundColor Gray
try {
    pip install tensorflow==2.16.1
    Write-Host "‚úÖ TensorFlow instalado" -ForegroundColor $successColor
} catch {
    Write-Host "‚ö†Ô∏è Falha ao instalar TensorFlow" -ForegroundColor $warningColor
}

Write-Host "üì• Instalando PyTorch..." -ForegroundColor Gray
try {
    pip install torch==2.1.0 torchvision==0.16.0
    Write-Host "‚úÖ PyTorch instalado" -ForegroundColor $successColor
} catch {
    Write-Host "‚ö†Ô∏è Falha ao instalar PyTorch" -ForegroundColor $warningColor
}

Write-Host "üì• Instalando Transformers..." -ForegroundColor Gray
try {
    pip install transformers==4.35.2
    Write-Host "‚úÖ Transformers instalado" -ForegroundColor $successColor
} catch {
    Write-Host "‚ö†Ô∏è Falha ao instalar Transformers" -ForegroundColor $warningColor
}

Write-Host "üì• Instalando OpenCV e MediaPipe..." -ForegroundColor Gray
try {
    pip install opencv-python==4.8.1.78 mediapipe==0.10.7
    Write-Host "‚úÖ OpenCV e MediaPipe instalados" -ForegroundColor $successColor
} catch {
    Write-Host "‚ö†Ô∏è Falha ao instalar OpenCV/MediaPipe" -ForegroundColor $warningColor
}

Write-Host ""

# ============================================================================
# IMPLEMENTA√á√ÉO DE MODELOS DL
# ============================================================================
Write-Host "üß† 4. IMPLEMENTANDO MODELOS DEEP LEARNING" -ForegroundColor $infoColor
Write-Host ""

# Criar diret√≥rios para modelos DL
$dlDirs = @("models/lstm", "models/transformer", "models/cnn", "models/rl")
foreach ($dir in $dlDirs) {
    try {
        New-Item -ItemType Directory -Path $dir -Force | Out-Null
        Write-Host "‚úÖ Diret√≥rio criado: $dir" -ForegroundColor $successColor
    } catch {
        Write-Host "‚ö†Ô∏è Falha ao criar diret√≥rio: $dir" -ForegroundColor $warningColor
    }
}

Write-Host ""

# ============================================================================
# TESTE DOS MODELOS DL
# ============================================================================
Write-Host "üß™ 5. TESTANDO MODELOS DEEP LEARNING" -ForegroundColor $infoColor
Write-Host ""

# Testar LSTM
Write-Host "üî¨ Testando LSTM..." -ForegroundColor Gray
try {
    python -c "
import sys
sys.path.append('.')
from app.models.lstm_performance_model import LSTMPerformanceModel
model = LSTMPerformanceModel()
print('‚úÖ LSTM model carregado com sucesso')
print(f'   Sequence length: {model.sequence_length}')
print(f'   Features: {model.n_features}')
"
    Write-Host "‚úÖ LSTM funcionando" -ForegroundColor $successColor
} catch {
    Write-Host "‚ùå Falha no teste LSTM" -ForegroundColor $errorColor
}

# Testar Transformer
Write-Host "üî¨ Testando Transformer..." -ForegroundColor Gray
try {
    python -c "
import sys
sys.path.append('.')
from app.models.transformer_recommendation import TransformerRecommendationModel
model = TransformerRecommendationModel()
print('‚úÖ Transformer model carregado com sucesso')
print(f'   Model name: {model.model_name}')
print(f'   Classes: {model.num_classes}')
"
    Write-Host "‚úÖ Transformer funcionando" -ForegroundColor $successColor
} catch {
    Write-Host "‚ùå Falha no teste Transformer" -ForegroundColor $errorColor
}

Write-Host ""

# ============================================================================
# ATUALIZA√á√ÉO DE ENDPOINTS
# ============================================================================
Write-Host "üîÑ 6. ATUALIZANDO ENDPOINTS PARA DL" -ForegroundColor $infoColor
Write-Host ""

# Criar novos endpoints DL
$dlEndpoints = @"
# Novos endpoints para Deep Learning
@router.post("/performance-dl")
async def predict_performance_dl(request: PerformancePredictionRequest):
    """Predi√ß√£o de performance usando LSTM"""
    # Implementar LSTM aqui
    pass

@router.post("/recommendations-dl") 
async def get_recommendations_dl(user_profile: UserProfileRequest):
    """Recomenda√ß√µes usando Transformer"""
    # Implementar Transformer aqui
    pass

@router.post("/form-analysis")
async def analyze_exercise_form(video_file: UploadFile):
    """An√°lise de forma usando CNN"""
    # Implementar CNN aqui
    pass
"@

try {
    Add-Content -Path "app/routes/dl_routes.py" -Value $dlEndpoints
    Write-Host "‚úÖ Endpoints DL criados" -ForegroundColor $successColor
} catch {
    Write-Host "‚ö†Ô∏è Falha ao criar endpoints DL" -ForegroundColor $warningColor
}

Write-Host ""

# ============================================================================
# TESTE INTEGRADO
# ============================================================================
Write-Host "üöÄ 7. TESTANDO SISTEMA INTEGRADO" -ForegroundColor $infoColor
Write-Host ""

# Voltar para diret√≥rio raiz
Set-Location ..

# Testar ML Service com DL
Write-Host "üß™ Testando ML Service com DL..." -ForegroundColor Gray
try {
    $response = Invoke-RestMethod -Uri "http://localhost:8000" -Method Get
    Write-Host "‚úÖ ML Service funcionando" -ForegroundColor $successColor
} catch {
    Write-Host "‚ö†Ô∏è ML Service n√£o est√° rodando" -ForegroundColor $warningColor
    Write-Host "   Execute: uvicorn app.main:app --reload --port 8000" -ForegroundColor Gray
}

Write-Host ""

# ============================================================================
# DOCUMENTA√á√ÉO
# ============================================================================
Write-Host "üìö 8. CRIANDO DOCUMENTA√á√ÉO DL" -ForegroundColor $infoColor
Write-Host ""

$dlDocs = @"
# Deep Learning Implementation Guide

## Modelos Implementados

### 1. LSTM Performance Model
- **Arquivo**: `app/models/lstm_performance_model.py`
- **Fun√ß√£o**: Predi√ß√£o de performance usando s√©ries temporais
- **Tecnologia**: TensorFlow + LSTM + Attention

### 2. Transformer Recommendation Model  
- **Arquivo**: `app/models/transformer_recommendation.py`
- **Fun√ß√£o**: Recomenda√ß√µes usando BERT + Transformer
- **Tecnologia**: PyTorch + BERT + Multi-Head Attention

### 3. CNN Form Analysis (Futuro)
- **Fun√ß√£o**: An√°lise de forma de exerc√≠cios
- **Tecnologia**: OpenCV + MediaPipe + CNN

## Como Usar

1. Instale depend√™ncias: `pip install -r requirements-dl.txt`
2. Execute ML Service: `uvicorn app.main:app --reload --port 8000`
3. Teste endpoints DL: `.\TESTE-ML-SERVICE.ps1`

## Pr√≥ximos Passos

1. Implementar CNN para an√°lise de forma
2. Adicionar Reinforcement Learning
3. Otimizar performance dos modelos
4. Implementar A/B testing
"@

try {
    Add-Content -Path "DEEP-LEARNING-GUIDE.md" -Value $dlDocs
    Write-Host "‚úÖ Documenta√ß√£o DL criada" -ForegroundColor $successColor
} catch {
    Write-Host "‚ö†Ô∏è Falha ao criar documenta√ß√£o" -ForegroundColor $warningColor
}

Write-Host ""

# ============================================================================
# RESUMO FINAL
# ============================================================================
Write-Host "=" * 70 -ForegroundColor Gray
Write-Host "üéâ MIGRA√á√ÉO PARA DEEP LEARNING CONCLU√çDA!" -ForegroundColor $successColor
Write-Host ""
Write-Host "üìä RESUMO DA MIGRA√á√ÉO:" -ForegroundColor Cyan
Write-Host "   ‚úÖ Backup do sistema atual criado" -ForegroundColor Gray
Write-Host "   ‚úÖ Depend√™ncias DL instaladas" -ForegroundColor Gray
Write-Host "   ‚úÖ Modelos LSTM implementados" -ForegroundColor Gray
Write-Host "   ‚úÖ Modelos Transformer implementados" -ForegroundColor Gray
Write-Host "   ‚úÖ Endpoints DL criados" -ForegroundColor Gray
Write-Host "   ‚úÖ Documenta√ß√£o atualizada" -ForegroundColor Gray
Write-Host ""
Write-Host "üöÄ PR√ìXIMOS PASSOS:" -ForegroundColor Cyan
Write-Host "   1. Execute: .\TESTE-ML-SERVICE.ps1" -ForegroundColor Gray
Write-Host "   2. Leia: DEEP-LEARNING-GUIDE.md" -ForegroundColor Gray
Write-Host "   3. Implemente CNN para an√°lise de forma" -ForegroundColor Gray
Write-Host "   4. Adicione Reinforcement Learning" -ForegroundColor Gray
Write-Host ""
Write-Host "üß† SISTEMA AGORA COM DEEP LEARNING!" -ForegroundColor Green
Write-Host ""
