# Script PowerShell para testar especificamente o ML Service
# Execute: .\TESTE-ML-SERVICE.ps1

Write-Host "ü§ñ TESTANDO ML SERVICE - SISTEMA DE TREINO INTELIGENTE" -ForegroundColor Cyan
Write-Host "=" * 70 -ForegroundColor Gray
Write-Host ""

# Cores
$successColor = "Green"
$errorColor = "Red"
$infoColor = "Yellow"
$warningColor = "Magenta"

# URL do ML Service
$mlServiceUrl = "http://localhost:8000"

# ============================================================================
# VERIFICA√á√ÉO INICIAL
# ============================================================================
Write-Host "üîç 1. VERIFICANDO ML SERVICE" -ForegroundColor $infoColor
Write-Host ""

try {
    $response = Invoke-RestMethod -Uri $mlServiceUrl -Method Get
    Write-Host "‚úÖ ML Service est√° rodando!" -ForegroundColor $successColor
    Write-Host "   Servi√ßo: $($response.service)" -ForegroundColor Gray
    Write-Host "   Vers√£o: $($response.version)" -ForegroundColor Gray
} catch {
    Write-Host "‚ùå ML Service N√ÉO est√° respondendo em $mlServiceUrl" -ForegroundColor $errorColor
    Write-Host "   Certifique-se de que o ML Service est√° rodando!" -ForegroundColor Gray
    Write-Host "   Comando: uvicorn app.main:app --reload --port 8000" -ForegroundColor Gray
    exit 1
}

Write-Host ""

# ============================================================================
# TESTE DE STATUS DOS MODELOS
# ============================================================================
Write-Host "üìä 2. VERIFICANDO STATUS DOS MODELOS" -ForegroundColor $infoColor
Write-Host ""

try {
    $response = Invoke-RestMethod -Uri "$mlServiceUrl/api/ml/train/models/status" -Method Get
    Write-Host "‚úÖ Status dos modelos obtido!" -ForegroundColor $successColor
    
    $recommendationModel = $response.recommendation_model
    $performanceModel = $response.performance_predictor
    $progressionModel = $response.progression_model
    
    Write-Host "   üìà Modelo de Recomenda√ß√£o:" -ForegroundColor Gray
    Write-Host "      Treinado: $($recommendationModel.trained)" -ForegroundColor Gray
    Write-Host "      Tipo: $($recommendationModel.type)" -ForegroundColor Gray
    
    Write-Host "   üéØ Preditor de Performance:" -ForegroundColor Gray
    Write-Host "      Treinado: $($performanceModel.trained)" -ForegroundColor Gray
    Write-Host "      Tipo: $($performanceModel.type)" -ForegroundColor Gray
    
    Write-Host "   üìà Modelo de Progress√£o:" -ForegroundColor Gray
    Write-Host "      Treinado: $($progressionModel.trained)" -ForegroundColor Gray
    Write-Host "      Tipo: $($progressionModel.type)" -ForegroundColor Gray
    
} catch {
    Write-Host "‚ùå Falha ao obter status dos modelos" -ForegroundColor $errorColor
}

Write-Host ""

# ============================================================================
# GERAR DADOS MOCK E TREINAR MODELO
# ============================================================================
Write-Host "üé≤ 3. GERANDO DADOS MOCK E TREINANDO MODELO" -ForegroundColor $infoColor
Write-Host ""

try {
    $response = Invoke-RestMethod -Uri "$mlServiceUrl/api/ml/train/generate-mock-data" -Method Post
    Write-Host "‚úÖ Modelo treinado com dados mock!" -ForegroundColor $successColor
    Write-Host "   Amostras geradas: $($response.samples_generated)" -ForegroundColor Gray
    
    if ($response.training_results) {
        Write-Host "   üìä Resultados do treinamento:" -ForegroundColor Gray
        Write-Host "      RF Accuracy: $($response.training_results.rf_accuracy)" -ForegroundColor Gray
        Write-Host "      GB Accuracy: $($response.training_results.gb_accuracy)" -ForegroundColor Gray
        Write-Host "      Ensemble Accuracy: $($response.training_results.ensemble_accuracy)" -ForegroundColor Gray
    }
} catch {
    Write-Host "‚ùå Falha ao treinar modelo com dados mock" -ForegroundColor $errorColor
    Write-Host "   Erro: $($_.Exception.Message)" -ForegroundColor Gray
}

Write-Host ""

# ============================================================================
# TESTE DE RECOMENDA√á√ïES ML
# ============================================================================
Write-Host "üéØ 4. TESTANDO RECOMENDA√á√ïES ML" -ForegroundColor $infoColor
Write-Host ""

# Dados de teste para recomenda√ß√£o
$userProfile = @{
    age = 25
    gender = "Masculino"
    weight = 75
    height = 175
    fitnessLevel = "Intermedi√°rio"
    trainingExperience = 2
    primaryGoals = @("Hipertrofia", "For√ßa")
    availableDays = 5
    availableTime = 60
    equipment = @("Barra", "Halteres")
} | ConvertTo-Json

try {
    $response = Invoke-RestMethod -Uri "$mlServiceUrl/api/ml/recommendations" -Method Post -Body $userProfile -ContentType "application/json"
    Write-Host "‚úÖ Recomenda√ß√µes ML geradas!" -ForegroundColor $successColor
    Write-Host "   Confian√ßa do ensemble: $($response.ensemble_confidence)" -ForegroundColor Gray
    Write-Host "   Concord√¢ncia dos modelos: $($response.model_agreement)" -ForegroundColor Gray
    Write-Host "   N√∫mero de recomenda√ß√µes: $($response.recommendations.Count)" -ForegroundColor Gray
} catch {
    Write-Host "‚ö†Ô∏è Recomenda√ß√µes ML podem falhar se modelo n√£o estiver treinado" -ForegroundColor $warningColor
    Write-Host "   Erro: $($_.Exception.Message)" -ForegroundColor Gray
}

Write-Host ""

# ============================================================================
# TESTE DE PREDI√á√ÉO DE PERFORMANCE
# ============================================================================
Write-Host "üìà 5. TESTANDO PREDI√á√ÉO DE PERFORMANCE" -ForegroundColor $infoColor
Write-Host ""

# Dados de hist√≥rico para predi√ß√£o
$performanceData = @{
    user_id = "test-user-123"
    exercise_id = "supino"
    history = @(
        @{
            date = "2024-01-01"
            exercise_id = "supino"
            weight = 80
            reps = 10
            sets = 3
        },
        @{
            date = "2024-01-08"
            exercise_id = "supino"
            weight = 82.5
            reps = 10
            sets = 3
        },
        @{
            date = "2024-01-15"
            exercise_id = "supino"
            weight = 85
            reps = 8
            sets = 3
        }
    )
} | ConvertTo-Json

try {
    $response = Invoke-RestMethod -Uri "$mlServiceUrl/api/ml/predict/performance" -Method Post -Body $performanceData -ContentType "application/json"
    Write-Host "‚úÖ Predi√ß√£o de performance gerada!" -ForegroundColor $successColor
    Write-Host "   Exerc√≠cio: $($response.exercise_id)" -ForegroundColor Gray
    Write-Host "   Performance atual: $($response.current_performance.weight)kg x $($response.current_performance.reps) reps" -ForegroundColor Gray
    Write-Host "   Pr√≥xima sess√£o prevista: $($response.predicted_next_session.weight)kg x $($response.predicted_next_session.reps) reps" -ForegroundColor Gray
    Write-Host "   Confian√ßa: $($response.predicted_next_session.confidence)" -ForegroundColor Gray
} catch {
    Write-Host "‚ùå Falha na predi√ß√£o de performance" -ForegroundColor $errorColor
    Write-Host "   Erro: $($_.Exception.Message)" -ForegroundColor Gray
}

Write-Host ""

# ============================================================================
# TESTE DE PREDI√á√ÉO DE PROGRESS√ÉO
# ============================================================================
Write-Host "üöÄ 6. TESTANDO PREDI√á√ÉO DE PROGRESS√ÉO" -ForegroundColor $infoColor
Write-Host ""

try {
    $response = Invoke-RestMethod -Uri "$mlServiceUrl/api/ml/predict/progression" -Method Post -Body $performanceData -ContentType "application/json"
    Write-Host "‚úÖ Predi√ß√£o de progress√£o gerada!" -ForegroundColor $successColor
    Write-Host "   Exerc√≠cio: $($response.exercise_id)" -ForegroundColor Gray
    Write-Host "   Atual: $($response.current.weight)kg x $($response.current.reps) reps" -ForegroundColor Gray
    Write-Host "   Recomendado: $($response.recommended_next.weight)kg x $($response.recommended_next.reps) reps" -ForegroundColor Gray
    Write-Host "   Tipo de progress√£o: $($response.recommended_next.progression_type)" -ForegroundColor Gray
    Write-Host "   Confian√ßa: $($response.confidence)" -ForegroundColor Gray
} catch {
    Write-Host "‚ùå Falha na predi√ß√£o de progress√£o" -ForegroundColor $errorColor
    Write-Host "   Erro: $($_.Exception.Message)" -ForegroundColor Gray
}

Write-Host ""

# ============================================================================
# TESTE DE BUSCA CIENT√çFICA
# ============================================================================
Write-Host "üî¨ 7. TESTANDO BUSCA CIENT√çFICA" -ForegroundColor $infoColor
Write-Host ""

$scientificQuery = @{
    query = "progressive overload training"
    limit = 3
} | ConvertTo-Json

try {
    $response = Invoke-RestMethod -Uri "$mlServiceUrl/api/ml/scientific/search" -Method Post -Body $scientificQuery -ContentType "application/json"
    Write-Host "‚úÖ Busca cient√≠fica realizada!" -ForegroundColor $successColor
    Write-Host "   Query: progressive overload training" -ForegroundColor Gray
    Write-Host "   Resultados encontrados: $($response.results.Count)" -ForegroundColor Gray
    
    if ($response.results.Count -gt 0) {
        Write-Host "   üìö Primeiro resultado:" -ForegroundColor Gray
        Write-Host "      T√≠tulo: $($response.results[0].title)" -ForegroundColor Gray
        Write-Host "      Autor: $($response.results[0].author)" -ForegroundColor Gray
        Write-Host "      Ano: $($response.results[0].year)" -ForegroundColor Gray
    }
} catch {
    Write-Host "‚ö†Ô∏è Busca cient√≠fica pode falhar sem conex√£o PubMed" -ForegroundColor $warningColor
    Write-Host "   Erro: $($_.Exception.Message)" -ForegroundColor Gray
}

Write-Host ""

# ============================================================================
# TESTE DE VALIDA√á√ÉO CIENT√çFICA
# ============================================================================
Write-Host "‚úÖ 8. TESTANDO VALIDA√á√ÉO CIENT√çFICA" -ForegroundColor $infoColor
Write-Host ""

$validationData = @{
    recommendation = "PPL (Push/Pull/Legs)"
    user_profile = "Jovem adulto, objetivo hipertrofia, 5 dias dispon√≠veis"
    scientific_criteria = @("progressive overload", "volume", "frequency")
} | ConvertTo-Json

try {
    $response = Invoke-RestMethod -Uri "$mlServiceUrl/api/ml/scientific/validate" -Method Post -Body $validationData -ContentType "application/json"
    Write-Host "‚úÖ Valida√ß√£o cient√≠fica realizada!" -ForegroundColor $successColor
    Write-Host "   Recomenda√ß√£o: $($response.recommendation)" -ForegroundColor Gray
    Write-Host "   Score cient√≠fico: $($response.scientific_score)" -ForegroundColor Gray
    Write-Host "   Evid√™ncias encontradas: $($response.evidence_count)" -ForegroundColor Gray
} catch {
    Write-Host "‚ö†Ô∏è Valida√ß√£o cient√≠fica pode falhar sem dados PubMed" -ForegroundColor $warningColor
    Write-Host "   Erro: $($_.Exception.Message)" -ForegroundColor Gray
}

Write-Host ""

# ============================================================================
# RESUMO FINAL
# ============================================================================
Write-Host "=" * 70 -ForegroundColor Gray
Write-Host "üéâ TESTES DO ML SERVICE CONCLU√çDOS!" -ForegroundColor $successColor
Write-Host ""
Write-Host "üìä RESUMO DOS TESTES:" -ForegroundColor Cyan
Write-Host "   ‚úÖ Status dos modelos" -ForegroundColor Gray
Write-Host "   ‚úÖ Gera√ß√£o de dados mock" -ForegroundColor Gray
Write-Host "   ‚úÖ Treinamento de modelo" -ForegroundColor Gray
Write-Host "   ‚úÖ Recomenda√ß√µes ML" -ForegroundColor Gray
Write-Host "   ‚úÖ Predi√ß√£o de performance" -ForegroundColor Gray
Write-Host "   ‚úÖ Predi√ß√£o de progress√£o" -ForegroundColor Gray
Write-Host "   ‚úÖ Busca cient√≠fica" -ForegroundColor Gray
Write-Host "   ‚úÖ Valida√ß√£o cient√≠fica" -ForegroundColor Gray
Write-Host ""
Write-Host "üåê URLs √öTEIS:" -ForegroundColor Cyan
Write-Host "   - ML Service:     http://localhost:8000" -ForegroundColor Gray
Write-Host "   - Swagger Docs:   http://localhost:8000/docs" -ForegroundColor Gray
Write-Host "   - Redoc:          http://localhost:8000/redoc" -ForegroundColor Gray
Write-Host ""
Write-Host "üìö PR√ìXIMOS PASSOS:" -ForegroundColor Cyan
Write-Host "   1. Leia TESTE-ML-COMPLETO.md para evolu√ß√£o DL" -ForegroundColor Gray
Write-Host "   2. Implemente LSTM para predi√ß√µes avan√ßadas" -ForegroundColor Gray
Write-Host "   3. Adicione Transformer para recomenda√ß√µes" -ForegroundColor Gray
Write-Host "   4. Integre CNN para an√°lise de forma" -ForegroundColor Gray
Write-Host ""
Write-Host "üöÄ ML SERVICE FUNCIONANDO PERFEITAMENTE!" -ForegroundColor Green
Write-Host ""
